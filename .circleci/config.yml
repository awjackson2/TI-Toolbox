version: 2.1

parameters:
  use_dockerhub_images:
    type: boolean
    default: true
    description: "Pull pre-built images from DockerHub instead of building locally"

executors:
  vm-docker:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: false

commands:
  common-setup:
    steps:
      - checkout
      - run:
          name: Free disk space
          command: |
            sudo rm -rf /usr/local/lib/android /opt/google || true
            docker system prune -af --volumes || true
      - run:
          name: Ensure Docker is running
          command: |
            sudo systemctl start docker || true
            docker info

  load-images-from-workspace:
    steps:
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Load Docker images from workspace
          command: |
            set -euo pipefail
            ls -lh /tmp/ws/docker-images
            for img in /tmp/ws/docker-images/*.tar; do
              echo "Loading $img"
              docker load -i "$img"
            done
            docker images

  run-tests-allow-fail:
    parameters:
      name:
        type: string
      cmd:
        type: string
    steps:
      - run:
          name: "<< parameters.name >>"
          command: |
            set +e
            mkdir -p /tmp/test-results /tmp/status
            bash -lc '<< parameters.cmd >>'
            ec=$?
            echo $ec > /tmp/status/exitcode.txt
            if [ $ec -ne 0 ]; then
              echo "Tests exited with $ec, continuing (by design)..."
            fi
            exit 0
      - store_artifacts:
          path: /tmp/test-results
          destination: << parameters.name >>-results
      - store_artifacts:
          path: /tmp/status
          destination: << parameters.name >>-status
      - persist_to_workspace:
          root: /tmp
          paths:
            - status

jobs:
  build-images:
    executor: vm-docker
    environment:
      DOCKER_BUILDKIT: "1"
    steps:
      - common-setup
      - run:
          name: Build or pull component images
          command: |
            set -eo pipefail
            if [ "<< pipeline.parameters.use_dockerhub_images >>" = "true" ]; then
              echo "Pulling pre-built images from DockerHub (fallback to build if missing)..."
              pulled_any=false
              if docker pull idossha/simnibs:v2.1.2; then docker tag idossha/simnibs:v2.1.2 simnibs:ci; pulled_any=true; fi
              if docker pull idossha/ti-toolbox_fsl:v6.0.7.18; then docker tag idossha/ti-toolbox_fsl:v6.0.7.18 fsl:ci; pulled_any=true; fi
              if docker pull idossha/ti-toolbox_freesurfer:v7.4.1; then docker tag idossha/ti-toolbox_freesurfer:v7.4.1 freesurfer:ci; pulled_any=true; fi
              if docker pull idossha/matlab:20th; then docker tag idossha/matlab:20th matlab-runtime:ci; pulled_any=true; fi
              if [ "$pulled_any" = "false" ]; then
                echo "No pre-built images available; building locally..."
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.simnibs            -t simnibs:ci          .
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.fsl                -t fsl:ci              .
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.freesurfer         -t freesurfer:ci       .
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.matlab.deprecated  -t matlab-runtime:ci   .
              fi
            else
              echo "Building component images locally..."
              DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.simnibs            -t simnibs:ci          .
              DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.fsl                -t fsl:ci              .
              DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.freesurfer         -t freesurfer:ci       .
              DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.matlab.deprecated  -t matlab-runtime:ci   .
            fi
      - run:
          name: Build final ci-runner image
          command: |
            DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.ci -t ci-runner:latest .
      - run:
          name: Verify Xvfb in ci-runner
          command: |
            docker run --rm --entrypoint bash ci-runner:latest -lc '
              set -euo pipefail
              Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp & pid=$!
              for i in {1..10}; do xdpyinfo -display :99 >/dev/null 2>&1 && break || sleep 0.5; done
              xdpyinfo -display :99 >/dev/null
              echo "âœ… Xvfb up on :99"
              kill $pid || true
            '
      - run:
          name: Save Docker images to workspace
          command: |
            set -euo pipefail
            mkdir -p /tmp/ws/docker-images
            docker save simnibs:ci          -o /tmp/ws/docker-images/simnibs_ci.tar
            docker save fsl:ci              -o /tmp/ws/docker-images/fsl_ci.tar
            docker save freesurfer:ci       -o /tmp/ws/docker-images/freesurfer_ci.tar
            docker save matlab-runtime:ci   -o /tmp/ws/docker-images/matlab_runtime_ci.tar
            docker save ci-runner:latest    -o /tmp/ws/docker-images/ci_runner_latest.tar
            ls -lh /tmp/ws/docker-images
      - persist_to_workspace:
          root: /tmp/ws
          paths:
            - docker-images

  run-analyzer-tests:
    executor: vm-docker
    steps:
      - common-setup
      - load-images-from-workspace
      - run-tests-allow-fail:
          name: Run analyzer unit tests
          cmd: |
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/analyzer.xml tests/test_analyzer.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/mesh_analyzer.xml tests/test_mesh_analyzer.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/voxel_analyzer.xml tests/test_voxel_analyzer.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/group_analyzer.xml tests/test_group_analyzer.py

  run-simulator-tests:
    executor: vm-docker
    steps:
      - common-setup
      - load-images-from-workspace
      - run-tests-allow-fail:
          name: Run simulator unit tests
          cmd: |
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/ti_simulator.xml  tests/test_ti_simulator.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/mti_simulator.xml tests/test_mti_simulator.py

  run-flex-search-tests:
    executor: vm-docker
    steps:
      - common-setup
      - load-images-from-workspace
      - run-tests-allow-fail:
          name: Run flex-search unit tests
          cmd: |
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/flex_search.xml tests/test_flex_search.py

  run-integration-tests:
    executor: vm-docker
    steps:
      - common-setup
      - load-images-from-workspace
      - run-tests-allow-fail:
          name: Setup test project directory & run integration tests
          cmd: |
            mkdir -p /tmp/test_projectdir
            docker run --rm -v /tmp/test_projectdir:/mnt/test_projectdir ci-runner:latest bash -lc '
              env | grep -E "^PROJECT_DIR_NAME=" || true
              bash tests/setup_test_projectdir.sh
              command -v tree >/dev/null 2>&1 && tree -a /mnt/test_projectdir || find /mnt/test_projectdir -maxdepth 3 -print
            '
            docker run --rm -v /tmp/test_projectdir:/mnt/test_projectdir ci-runner:latest bash -lc '
              bash tests/test_simulator_runner.sh
              command -v tree >/dev/null 2>&1 && tree -a /mnt/test_projectdir || find /mnt/test_projectdir -maxdepth 3 -print
            '
            docker run --rm -v /tmp/test_projectdir:/mnt/test_projectdir ci-runner:latest bash -lc '
              bash tests/test_analyzer_runner.sh
              command -v tree >/dev/null 2>&1 && tree -a /mnt/test_projectdir || find /mnt/test_projectdir -maxdepth 3 -print
            '

  summarize:
    executor: vm-docker
    steps:
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Summarize job statuses
          command: |
            set -e
            echo "Collected statuses:"
            find /tmp/ws -path "*/status/exitcode.txt" -print -exec cat {} \;
            bad=0
            while IFS= read -r -d '' f; do
              ec=$(cat "$f" || echo 1)
              [ "$ec" -ne 0 ] && bad=1
            done < <(find /tmp/ws -path "*/status/exitcode.txt" -print0)
            if [ "$bad" -ne 0 ]; then
              echo "One or more test groups failed. Failing pipeline."
              exit 1
            fi
            echo "All test groups reported success."

workflows:
  version: 2
  build_and_test:
    jobs:
      - build-images
      - run-analyzer-tests:
          requires: [build-images]
      - run-simulator-tests:
          requires: [build-images]
      - run-flex-search-tests:
          requires: [build-images]
      - run-integration-tests:
          requires: [build-images]
      - summarize:
          requires:
            - run-analyzer-tests
            - run-simulator-tests
            - run-flex-search-tests
            - run-integration-tests
