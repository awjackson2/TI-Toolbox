version: 2.1

parameters:
  use_dockerhub_images:
    type: boolean
    default: true
    description: "Pull pre-built images from DockerHub instead of building locally"
  skip_component_images:
    type: boolean
    default: true
    description: "Skip pulling/building component images (simnibs/fsl/freesurfer/matlab-runtime) and build only ci-runner"

executors:
  vm-docker:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: false

commands:
  common-setup:
    steps:
      - checkout
      - run:
          name: Free disk space
          command: |
            sudo rm -rf /usr/local/lib/android /opt/google || true
            docker system prune -af --volumes || true
      - run:
          name: Ensure Docker is running
          command: |
            sudo systemctl start docker || true
            docker info

  prepare-ci-runner:
    steps:
      - run:
          name: Build or pull component images and ci-runner
          command: |
            set -eo pipefail
            if [ "<< pipeline.parameters.skip_component_images >>" = "true" ]; then
              echo "Skipping component images; building only ci-runner..."
            else
              if [ "<< pipeline.parameters.use_dockerhub_images >>" = "true" ]; then
                echo "Pulling pre-built images from DockerHub (fallback to build if missing)..."
                pulled_any=false
                if docker pull idossha/simnibs:v2.1.2; then docker tag idossha/simnibs:v2.1.2 simnibs:ci; pulled_any=true; fi
                if docker pull idossha/ti-toolbox_fsl:v6.0.7.18; then docker tag idossha/ti-toolbox_fsl:v6.0.7.18 fsl:ci; pulled_any=true; fi
                if docker pull idossha/ti-toolbox_freesurfer:v7.4.1; then docker tag idossha/ti-toolbox_freesurfer:v7.4.1 freesurfer:ci; pulled_any=true; fi
                if docker pull idossha/matlab:20th; then docker tag idossha/matlab:20th matlab-runtime:ci; pulled_any=true; fi
                if [ "$pulled_any" = "false" ]; then
                  echo "No pre-built images available; building locally..."
                  DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.simnibs            -t simnibs:ci          .
                  DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.fsl                -t fsl:ci              .
                  DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.freesurfer         -t freesurfer:ci       .
                  DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.matlab.deprecated  -t matlab-runtime:ci   .
                fi
              else
                echo "Building component images locally..."
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.simnibs            -t simnibs:ci          .
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.fsl                -t fsl:ci              .
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.freesurfer         -t freesurfer:ci       .
                DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.matlab.deprecated  -t matlab-runtime:ci   .
              fi
            fi
            DOCKER_BUILDKIT=1 docker build -f development/blueprint/Dockerfile.ci -t ci-runner:latest .
      - run:
          name: Verify Xvfb in ci-runner
          command: |
            docker run --rm --entrypoint bash ci-runner:latest -lc '
              set -euo pipefail
              Xvfb :99 -screen 0 1280x1024x24 -nolisten tcp & pid=$!
              for i in {1..10}; do xdpyinfo -display :99 >/dev/null 2>&1 && break || sleep 0.5; done
              xdpyinfo -display :99 >/dev/null
              echo "âœ… Xvfb up on :99"
              kill $pid || true
            '

  run-tests-allow-fail:
    parameters:
      label:
        type: string
      bucket:
        type: string
      cmd:
        type: string
    steps:
      - run:
          name: "<< parameters.label >>"
          command: |
            set +e
            mkdir -p /tmp/test-results /tmp/status/<< parameters.bucket >>
            {
              << parameters.cmd >>
            }
            ec=$?
            echo $ec > /tmp/status/<< parameters.bucket >>/exitcode.txt
            if [ $ec -ne 0 ]; then
              echo "Tests exited with $ec, continuing (by design)..."
            fi
            exit 0
      - store_artifacts:
          path: /tmp/test-results
          destination: << parameters.bucket >>-results
      - store_artifacts:
          path: /tmp/status/<< parameters.bucket >>
          destination: << parameters.bucket >>-status
      - persist_to_workspace:
          root: /tmp
          paths:
            - status/<< parameters.bucket >>

jobs:

  build-and-run-tests:
    executor: vm-docker
    steps:
      - common-setup
      - prepare-ci-runner
      - run-tests-allow-fail:
          label: Run analyzer unit tests
          bucket: analyzer
          cmd: |
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/analyzer.xml        tests/test_analyzer.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/mesh_analyzer.xml   tests/test_mesh_analyzer.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/voxel_analyzer.xml  tests/test_voxel_analyzer.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/group_analyzer.xml  tests/test_group_analyzer.py
      - run-tests-allow-fail:
          label: Run simulator unit tests
          bucket: simulator
          cmd: |
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/ti_simulator.xml   tests/test_ti_simulator.py
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/mti_simulator.xml  tests/test_mti_simulator.py
      - run-tests-allow-fail:
          label: Run flex-search unit tests
          bucket: flexsearch
          cmd: |
            docker run --rm ci-runner:latest pytest -q --junitxml=/tmp/test-results/flex_search.xml tests/test_flex_search.py
      - run-tests-allow-fail:
          label: Setup test project directory & run integration tests
          bucket: integration
          cmd: |
            mkdir -p /tmp/test_projectdir
            chmod 777 /tmp/test_projectdir
            # Verify the directory exists and is writable
            ls -la /tmp/test_projectdir
            docker run --rm --user 0:0 -v /tmp/test_projectdir:/mnt/test_projectdir ci-runner:latest bash -c '
              set -e
              echo "DEBUG: Starting setup_test_projectdir.sh"
              echo "DEBUG: Current user: $(whoami)"
              echo "DEBUG: Current UID: $(id -u)"
              echo "DEBUG: Current GID: $(id -g)"
              echo "DEBUG: Current directory: $(pwd)"
              echo "DEBUG: Mount point exists: $([ -d /mnt/test_projectdir ] && echo "YES" || echo "NO")"
              echo "DEBUG: Mount point writable: $([ -w /mnt/test_projectdir ] && echo "YES" || echo "NO")"
              echo "DEBUG: Creating mount point if it does not exist"
              mkdir -p /mnt/test_projectdir
              chmod 777 /mnt/test_projectdir
              env | grep -E "^PROJECT_DIR_NAME=" || true
              bash tests/setup_test_projectdir.sh
              echo "DEBUG: Setup completed, listing directory contents"
              command -v tree >/dev/null 2>&1 && tree -a /mnt/test_projectdir || find /mnt/test_projectdir -maxdepth 3 -print
            '
            docker run --rm --user 0:0 -v /tmp/test_projectdir:/mnt/test_projectdir ci-runner:latest bash -c '
              set -e
              echo "DEBUG: Starting test_simulator_runner.sh"
              bash tests/test_simulator_runner.sh
              echo "DEBUG: Simulator tests completed, listing directory contents"
              command -v tree >/dev/null 2>&1 && tree -a /mnt/test_projectdir || find /mnt/test_projectdir -maxdepth 3 -print
            '
            docker run --rm --user 0:0 -v /tmp/test_projectdir:/mnt/test_projectdir ci-runner:latest bash -c '
              set -e
              echo "DEBUG: Starting test_analyzer_runner.sh"
              bash tests/test_analyzer_runner.sh
              echo "DEBUG: Analyzer tests completed, listing directory contents"
              command -v tree >/dev/null 2>&1 && tree -a /mnt/test_projectdir || find /mnt/test_projectdir -maxdepth 3 -print
            '

  summarize:
    executor: vm-docker
    steps:
      - attach_workspace:
          at: /tmp/ws
      - run:
          name: Summarize job statuses
          command: |
            set -e
            echo "Collected statuses (by bucket):"
            find /tmp/ws/status -name exitcode.txt -print -exec cat {} \; || true
            bad=0
            while IFS= read -r -d '' f; do
              ec=$(cat "$f" || echo 1)
              [ "$ec" -ne 0 ] && bad=1
            done < <(find /tmp/ws/status -name exitcode.txt -print0 2>/dev/null)
            if [ "$bad" -ne 0 ]; then
              echo "One or more test groups failed. Failing pipeline."
              exit 1
            fi
            echo "All test groups reported success."

workflows:
  version: 2
  build_and_test:
    jobs:
      - build-and-run-tests
      - summarize:
          requires:
            - build-and-run-tests
